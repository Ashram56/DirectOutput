<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
  <Product Id="*"
      Name="DirectOutput"
      Language="1033"
      Version="3.1.0.0"
      Manufacturer="DirectOutput"
      UpgradeCode="75f5d8f8-a58b-4a2c-91db-eeef0a114582">

    <Package Description="DirectOutput" InstallerVersion="200" Compressed="yes" InstallScope="perUser" />

    <MajorUpgrade DowngradeErrorMessage="A newer version of [ProductName] is already installed." />
    <MediaTemplate EmbedCab="yes" />

    <!-- Components to install -->
    <Feature Id="ProductFeature" Title="DirectOutput" Level="1">
      <ComponentRef Id="DofFiles" />
      <ComponentRef Id="SampleConfigFiles" />
      <ComponentRef Id="DirectOutputComObject.dll" />  <!-- from Generated/RegisterDirectOutputComObject.wxs -->
    </Feature>

    <!--
        Generated/RegisterDirectOutputComObject.wxs is generated automatically
        by a special target in the project file.  You can't see the target from
        within the Visual Studio IDE, but you can see it if you edit the source
        (DOFSetup.wixproj).  See <Target Name="BeforeBuild"> - the registration
        entry is generated by a <HeatFile> target therein.
        
        <HeatFile> invokes a WiX tool that extracts the COM object registration
        data from the DLL and generates a WiX file with suitable entries to add
        the registration entries to the MSI script.  The tool also includes the
        DLL file itself in the build, so we don't have to include it manually.
        
        We use the <HeatFile> approach because it's the"right" way of handling 
        COM object registration in WiX.  I don't like the way the target is
        hidden from the IDE view, but this is by far the most automatic way to
        do this and ensures that everything stays up to dates, so it seems like
        an equitable trade.
    -->

    <!-- At run time, show the dialog UI to select the destination folder -->
    <Property Id="WIXUI_INSTALLDIR" Value="DOFDIR" />
    <UIRef Id="WixUI_InstallDirCustom" />

    <!-- Custom license file for the dialog UI -->
    <WixVariable Id="WixUILicenseRtf" Value="res\DOFLicense.rtf" />
    
    <!-- Custom UI dialog bitmaps -->
    <WixVariable Id="WixUIBannerBmp" Value="res\Banner.bmp" />
    <WixVariable Id="WixUIDialogBmp" Value="res\DialogSide.bmp" />

    <!-- Custom B2SFixup Action.  This is a separate WiX C# Custom Action 
         project.  The custom action does the special B2S plugin setup 
         required for DOF: it finds the B2S DLL from its COM object 
         registration; creates the Plugins\DirectOutput shortcut to the
         new DOF folder; enables plugins in the B2S registry settings; and 
         edits the B2S config file to suppress missing backglass warnings.  
         This is all weird custom stuff outside of the normal MSI scope, 
         which is why we need to do it with a custom action instead of the
         normal WiX declarative model.
         
         Note that we have to run this action in Execute="deferred" mode, so
         that it runs after the DOF folder has been created.  The shortcut
         we create won't work if we create it before the folder exists.
    -->
    <Binary Id="B2SFixupDLL" SourceFile="$(var.DOFSetupB2SFixup.TargetDir)DOFSetupB2SFixup.CA.dll" />
    <CustomAction
      Id="B2SFixup"
      Return="check"
      Execute="deferred"
      BinaryKey="B2SFixupDLL"
      DllEntry="B2SFixup" />
    
    <!-- Our B2SFixup custom task has run deferred, and as a result it
         doesn't have access to session.GetTargetPath() to identify the
         install folder.  (That just seems to be an MSI limitation.)  
         To pass the folder path, we have to use a property, which we
         can do with ANOTHER Custom Action.  We can access the property
         listed in Value="" from the C# code via session.CustomActionData[].
    -->
    <CustomAction
      Id="SetCustomActionVars"
      Return="check"
      Property="B2SFixup" Value="INSTALLEDPATH=[DOFDIR]" />

    <!-- Set up our custom action sequence.  The property setter has to run
         before the C# task. -->
    <InstallExecuteSequence>
      <Custom Action="SetCustomActionVars" Before="B2SFixup" />
      <Custom Action="B2SFixup" Before="InstallFinalize"  />
    </InstallExecuteSequence>


  </Product>

  <Fragment>
    <SetDirectory Id="INSTALLFOLDER" Value="[WindowsVolume]DirectOutput" />
    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="INSTALLFOLDER">
        <Directory Id="DOFDIR" >
          <Directory Id="DOFCONFIGDIR" Name="Config" />
        </Directory>
      </Directory>
    </Directory>
  </Fragment>

  <Fragment>
    <DirectoryRef Id="DOFDIR">
      <Component Id="DofFiles" Guid="F1126C16-DACD-4D27-9C20-C5589D53EE2A">
        <File Source="$(var.B2SServerPlugin.TargetPath)" />
        <File Source="$(var.B2SServerPlugin.TargetDir)B2SServerPluginInterface.dll" />

        <File Source="$(var.DirectOutput.TargetPath)" />
        <File Source="$(var.DirectOutput.TargetDir)DirectOutputShapes.png" />
        <File Source="$(var.DirectOutput.TargetDir)DirectOutputShapes.xml" />
        <File Source="$(var.DirectOutput.TargetDir)Newtonsoft.Json.dll" />
        <File Source="$(var.DirectOutput.TargetDir)Ciloci.Flee.dll" />
        <File Source="$(var.DirectOutput.TargetDir)FTD2XX32.dll" />
        <File Source="$(var.DirectOutput.TargetDir)PacDrive32.dll" />
        <File Source="$(var.DirectOutput.TargetDir)Q42.HueApi.dll" />
        <File Source="$(var.DirectOutput.TargetDir)Q42.HueApi.ColorConverters.dll" />

        <!-- NOTE: DirectOutputComObject is included separately via Generated/RegisterDirectOutputComObject.wxs -->

        <File Source="$(var.DirectOutput PinballX Plugin.TargetPath)" />
        <File Source="$(var.DirectOutputComObjectRegister.TargetPath)" />
        <File Source="$(var.DirectOutputConfigTester.TargetPath)" />
        <File Source="$(var.Extensions.TargetPath)" />
        <File Source="$(var.GlobalConfigEditor.TargetPath)" />
        <File Source="$(var.LedControlFileTester.TargetPath)" />

        <File Source="$(var.ProPinballSlave.TargetPath)" />
      </Component>
    </DirectoryRef>

    <DirectoryRef Id="DOFCONFIGDIR">
      <Component Id="SampleConfigFiles" Guid="F372286A-B036-471C-AC42-357EBCB9EBD3">
        <File Source="$(var.SolutionDir)config\Cabinet.xml" />
        <File Source="$(var.SolutionDir)config\GlobalConfig_B2SServer.xml" />
      </Component>
    </DirectoryRef>
  </Fragment>

  <Fragment>
    <UI Id="WixUI_InstallDirCustom">
      <TextStyle Id="WixUI_Font_Normal" FaceName="Tahoma" Size="8" />
      <TextStyle Id="WixUI_Font_Bigger" FaceName="Tahoma" Size="12" />
      <TextStyle Id="WixUI_Font_Title" FaceName="Tahoma" Size="9" Bold="yes" />

      <Property Id="DefaultUIFont" Value="WixUI_Font_Normal" />
      <Property Id="WixUI_Mode" Value="InstallDir" />

      <DialogRef Id="BrowseDlg" />
      <DialogRef Id="DiskCostDlg" />
      <DialogRef Id="ErrorDlg" />
      <DialogRef Id="FatalError" />
      <DialogRef Id="FilesInUse" />
      <DialogRef Id="MsiRMFilesInUse" />
      <DialogRef Id="PrepareDlg" />
      <DialogRef Id="ProgressDlg" />
      <DialogRef Id="ResumeDlg" />
      <DialogRef Id="UserExit" />

      <Publish Dialog="BrowseDlg" Control="OK" Event="DoAction" Value="WixUIValidatePath" Order="3">1</Publish>
      <Publish Dialog="BrowseDlg" Control="OK" Event="SpawnDialog" Value="InvalidDirDlg" Order="4"><![CDATA[NOT WIXUI_DONTVALIDATEPATH AND WIXUI_INSTALLDIR_VALID<>"1"]]></Publish>

      <Publish Dialog="ExitDialog" Control="Finish" Event="EndDialog" Value="Return" Order="999">1</Publish>

      <Publish Dialog="WelcomeDlg" Control="Next" Event="NewDialog" Value="InstallDirDlg">NOT Installed</Publish>
      <Publish Dialog="WelcomeDlg" Control="Next" Event="NewDialog" Value="VerifyReadyDlg">Installed AND PATCH</Publish>

      <Publish Dialog="InstallDirDlg" Control="Back" Event="NewDialog" Value="WelcomeDlg">1</Publish>
      <Publish Dialog="InstallDirDlg" Control="Next" Event="SetTargetPath" Value="[WIXUI_INSTALLDIR]" Order="1">1</Publish>
      <Publish Dialog="InstallDirDlg" Control="Next" Event="DoAction" Value="WixUIValidatePath" Order="2">NOT WIXUI_DONTVALIDATEPATH</Publish>
      <Publish Dialog="InstallDirDlg" Control="Next" Event="SpawnDialog" Value="InvalidDirDlg" Order="3"><![CDATA[NOT WIXUI_DONTVALIDATEPATH AND WIXUI_INSTALLDIR_VALID<>"1"]]></Publish>
      <Publish Dialog="InstallDirDlg" Control="Next" Event="NewDialog" Value="VerifyReadyDlg" Order="4">WIXUI_DONTVALIDATEPATH OR WIXUI_INSTALLDIR_VALID="1"</Publish>
      <Publish Dialog="InstallDirDlg" Control="ChangeFolder" Property="_BrowseProperty" Value="[WIXUI_INSTALLDIR]" Order="1">1</Publish>
      <Publish Dialog="InstallDirDlg" Control="ChangeFolder" Event="SpawnDialog" Value="BrowseDlg" Order="2">1</Publish>

      <Publish Dialog="VerifyReadyDlg" Control="Back" Event="NewDialog" Value="InstallDirDlg" Order="1">NOT Installed</Publish>
      <Publish Dialog="VerifyReadyDlg" Control="Back" Event="NewDialog" Value="MaintenanceTypeDlg" Order="2">Installed AND NOT PATCH</Publish>
      <Publish Dialog="VerifyReadyDlg" Control="Back" Event="NewDialog" Value="WelcomeDlg" Order="2">Installed AND PATCH</Publish>

      <Publish Dialog="MaintenanceWelcomeDlg" Control="Next" Event="NewDialog" Value="MaintenanceTypeDlg">1</Publish>

      <Publish Dialog="MaintenanceTypeDlg" Control="RepairButton" Event="NewDialog" Value="VerifyReadyDlg">1</Publish>
      <Publish Dialog="MaintenanceTypeDlg" Control="RemoveButton" Event="NewDialog" Value="VerifyReadyDlg">1</Publish>
      <Publish Dialog="MaintenanceTypeDlg" Control="Back" Event="NewDialog" Value="MaintenanceWelcomeDlg">1</Publish>

      <Property Id="ARPNOMODIFY" Value="1" />
    </UI>

    <UIRef Id="WixUI_Common" />
  </Fragment>

</Wix>
